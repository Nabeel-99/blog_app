// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  role          String    @default("USER") // "ADMIN" for owner
  bio           String?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  replies       Reply[]
  hasSubscribed Boolean   @default(false)
}

model Post {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  categories   Category[] @relation("PostCategories")
  coverImage   String
  coverImageId String
  content      String
  likes        Like[]
  views        Int?       @default(0)
  slug         String     @unique
  createdAt    DateTime   @default(now())
  authorId     String
  author       User       @relation(fields: [authorId], references: [id])
  comments     Comment[]
  isFeatured   Boolean    @default(false)
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[] @relation("PostCategories")
}

model Comment {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  content       String
  post          Post     @relation(fields: [postId], references: [id])
  postId        Int
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  replies       Reply[]
  likes         Like[]
  isUserDeleted Boolean  @default(false)
}

model Reply {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  content       String
  comment       Comment  @relation(fields: [commentId], references: [id])
  commentId     Int
  parent        Reply?   @relation("ReplyToReply", fields: [parentId], references: [id])
  parentId      Int?
  children      Reply[]  @relation("ReplyToReply")
  author        User?    @relation(fields: [authorId], references: [id])
  authorId      String?
  likes         Like[]
  isUserDeleted Boolean  @default(false)
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  replyId   Int?
  reply     Reply?   @relation(fields: [replyId], references: [id])
}

model subscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}
